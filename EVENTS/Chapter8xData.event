
eventChapter8xData ; B1/D851

  _PrepGroup ; B1/D851
    .byte 11, 8

    UNIT Gomer, Enemy, [10, 2], [10, 2], Gomer, [SteelAxe, SteelBow, Lockpick], 5, True, [$01, $03, $00, $80]
    UNIT BanditHunter, Enemy, [4, 11], [4, 11], Gomer, [PoisonBow], 10, False, [$00, $00, $00, $00]
    UNIT BanditHunter, Enemy, [6, 11], [6, 11], Gomer, [PoisonBow], 10, False, [$00, $00, $00, $00]
    UNIT BanditHunter, Enemy, [14, 11], [14, 11], Gomer, [PoisonBow], 10, False, [$00, $00, $00, $00]
    UNIT BanditHunter, Enemy, [16, 11], [16, 11], Gomer, [PoisonBow], 10, False, [$00, $00, $00, $00]
    UNIT BanditBrigand1, Enemy, [9, 8], [9, 8], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [11, 8], [11, 8], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [9, 9], [9, 9], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [11, 9], [11, 9], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [9, 10], [9, 10], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [11, 10], [11, 10], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [10, 9], [10, 9], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [10, 8], [10, 8], Gomer, [IronAxe], 12, False, [$00, $01, $00, $00]
    UNIT BanditBrigand1, Enemy, [4, 8], [4, 8], Gomer, [HandAxe], 12, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [9, 3], [9, 3], Gomer, [SteelAxe], 15, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [16, 8], [16, 8], Gomer, [HandAxe], 12, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [10, 4], [10, 4], Gomer, [SteelAxe], 15, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [11, 3], [11, 3], Gomer, [SteelAxe], 15, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [7, 1], [7, 1], Gomer, [HandAxe], 10, False, [$00, $10, $00, $00]
    UNIT BanditBrigand1, Enemy, [13, 1], [13, 1], Gomer, [HandAxe], 10, False, [$00, $10, $00, $00]
    UNIT BanditBrigand1, Enemy, [12, 2], [12, 2], Gomer, [HandAxe], 10, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [8, 2], [8, 2], Gomer, [HandAxe], 10, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [4, 2], [4, 2], Gomer, [HandAxe], 10, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [3, 1], [3, 1], Gomer, [HandAxe], 10, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [5, 1], [5, 1], Gomer, [HandAxe], 10, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [1, 15], [1, 15], Gomer, [IronAxe, Antidote], 8, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [1, 10], [1, 10], Gomer, [SteelAxe], 8, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [4, 18], [4, 18], Gomer, [IronAxe], 8, False, [$00, $03, $00, $00]
    UNIT BanditHunter, Enemy, [1, 17], [1, 17], Gomer, [SteelBow], 10, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [19, 10], [19, 10], Gomer, [Hammer], 8, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [19, 15], [19, 15], Gomer, [SteelAxe], 10, False, [$00, $03, $00, $00]
    UNIT BanditBrigand1, Enemy, [16, 18], [16, 18], Gomer, [IronAxe], 8, False, [$00, $03, $00, $00]
    UNIT BanditHunter, Enemy, [19, 17], [19, 17], Gomer, [SteelBow], 9, False, [$00, $03, $00, $00]
    UNIT BanditHunter, Enemy, [8, 1], [8, 1], Gomer, [SteelBow], 9, False, [$00, $10, $00, $00]
    UNIT BanditHunter, Enemy, [12, 1], [12, 1], Gomer, [SteelBow], 9, False, [$00, $10, $00, $00]
    UNIT BanditHunter, Enemy, [3, 2], [3, 2], Gomer, [SteelBow], 9, False, [$00, $03, $00, $00]
    UNIT BanditHunter, Enemy, [5, 2], [5, 2], Gomer, [SteelBow], 9, False, [$00, $03, $00, $00]
    UNIT BanditHunter, Enemy, [4, 1], [4, 1], Gomer, [SteelBow], 9, False, [$00, $03, $00, $00]
    UNIT ThiefEnemy1, Enemy, [12, 7], [12, 7], Gomer, [Lockpick, SlimSword], 5, False, [$10, $0B, $00, $00]
  UNIT

  _StartingPositions ; B1/DB61
    .byte 10, 21
    .byte 8, 21
    .byte 12, 21
    .byte 9, 20
    .byte 11, 20
    .byte 10, 19
  .byte $FF

  _Chest1Coordinates ; B1/DB6E
    .byte 3, 5

  _Chest1Item ; B1/DB70
    .word LegRing

  _Chest1Events ; B1/DB72
    STORE_WORD wEventEngineXCoordinate, 3
    STORE_WORD wEventEngineYCoordinate, 5
    STORE_WORD wEventEngineParameter1, $0026

    CALL_ASM_LOOP rlASMCSingleTileChangeByCoords, $0000
    YIELD_UNK

    STORE_WORD_FROM wEventEngineParameter1, _Chest1Item
    CALL_ASM_LOOP rlASMCSetPopupGivenItemWithMaxDurability, $0000
    YIELD_UNK

    CALL_ASM_LOOP rlASMCSetupGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCSetupGiveToConvoyIfInventoryFull, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveToConvoyIfInventoryFull, $0000
  END2

  _Chest3Coordinates ; B1/DBB2
    .byte 4, 15

  _Chest3Item ; B1/DBB4
    .word WrathManual

  _Chest3Events ; B1/DBB6
    STORE_WORD wEventEngineXCoordinate, 4
    STORE_WORD wEventEngineYCoordinate, 15
    STORE_WORD wEventEngineParameter1, $0026

    CALL_ASM_LOOP rlASMCSingleTileChangeByCoords, $0000
    YIELD_UNK

    STORE_WORD_FROM wEventEngineParameter1, _Chest3Item
    CALL_ASM_LOOP rlASMCSetPopupGivenItemWithMaxDurability, $0000
    YIELD_UNK

    CALL_ASM_LOOP rlASMCSetupGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCSetupGiveToConvoyIfInventoryFull, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveToConvoyIfInventoryFull, $0000
  END2

  _Chest4Coordinates ; B1/DBF6
    .byte 6, 15

  _Chest4Item ; B1/DBF8
    .word DevilAxe

  _Chest4Events ; B1/DBFA
    STORE_WORD wEventEngineXCoordinate, 6
    STORE_WORD wEventEngineYCoordinate, 15
    STORE_WORD wEventEngineParameter1, $0026

    CALL_ASM_LOOP rlASMCSingleTileChangeByCoords, $0000
    YIELD_UNK

    STORE_WORD_FROM wEventEngineParameter1, _Chest4Item
    CALL_ASM_LOOP rlASMCSetPopupGivenItemWithMaxDurability, $0000
    YIELD_UNK

    CALL_ASM_LOOP rlASMCSetupGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCSetupGiveToConvoyIfInventoryFull, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveToConvoyIfInventoryFull, $0000
  END2

  _Chest5Coordinates ; B1/DC3A
    .byte 14, 15

  _Chest5Item ; B1/DC3C
    .word Hammer

  _Chest5Events ; B1/DC3E
    STORE_WORD wEventEngineXCoordinate, 14
    STORE_WORD wEventEngineYCoordinate, 15
    STORE_WORD wEventEngineParameter1, $0026

    CALL_ASM_LOOP rlASMCSingleTileChangeByCoords, $0000
    YIELD_UNK

    STORE_WORD_FROM wEventEngineParameter1, _Chest5Item
    CALL_ASM_LOOP rlASMCSetPopupGivenItemWithMaxDurability, $0000
    YIELD_UNK

    CALL_ASM_LOOP rlASMCSetupGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCSetupGiveToConvoyIfInventoryFull, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveToConvoyIfInventoryFull, $0000
  END2

  _Chest6Coordinates ; B1/DC7E
    .byte 16, 15

  _Chest6Item ; B1/DC80
    .word NeirsScroll

  _Chest6Events ; B1/DC82
    STORE_WORD wEventEngineXCoordinate, 16
    STORE_WORD wEventEngineYCoordinate, 15
    STORE_WORD wEventEngineParameter1, $0026

    CALL_ASM_LOOP rlASMCSingleTileChangeByCoords, $0000
    YIELD_UNK

    STORE_WORD_FROM wEventEngineParameter1, _Chest6Item
    CALL_ASM_LOOP rlASMCSetPopupGivenItemWithMaxDurability, $0000
    YIELD_UNK

    CALL_ASM_LOOP rlASMCSetupGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCSetupGiveToConvoyIfInventoryFull, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveToConvoyIfInventoryFull, $0000
  END2

  _Chest2Coordinates ; B1/DCC2
    .byte 17, 3

  _Chest2Item ; B1/DCC4
    .word PureWater

  _Chest2Events ; B1/DCC6
    STORE_WORD wEventEngineXCoordinate, 17
    STORE_WORD wEventEngineYCoordinate, 3
    STORE_WORD wEventEngineParameter1, $0002

    CALL_ASM_LOOP rlASMCSingleTileChangeByCoords, $0000
    YIELD_UNK

    STORE_WORD_FROM wEventEngineParameter1, _Chest2Item
    CALL_ASM_LOOP rlASMCSetPopupGivenItemWithMaxDurability, $0000
    YIELD_UNK

    CALL_ASM_LOOP rlASMCSetupGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveItemPopup, $0000
    CALL_ASM_LOOP rlASMCSetupGiveToConvoyIfInventoryFull, $0000
    CALL_ASM_LOOP rlASMCWaitWhileGiveToConvoyIfInventoryFull, $0000
  END2
